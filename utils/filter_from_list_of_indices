{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"filter_from_list_of_indices","version":"0.3.2","provenance":[{"file_id":"1z7ByEQjTG4IslRRU5kgbrigEdo3S55Yp","timestamp":1558673064223},{"file_id":"1rJTxHcAQLaPdZqf0eusdy9oQfRzRtFD2","timestamp":1558511078497}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"52ZWQBFx4Q11","colab_type":"code","outputId":"44960329-8846-4a6e-a13d-f95b7e080e2e","executionInfo":{"status":"ok","timestamp":1558515803040,"user_tz":-480,"elapsed":21156,"user":{"displayName":"Kenneth Lee","photoUrl":"","userId":"12092675826143028048"}},"colab":{"base_uri":"https://localhost:8080/","height":138}},"source":["\"\"\"Given a file with list of indices, filter kb sentences, and output to a file\"\"\"\n","from google.colab import drive\n","drive.mount('/content/gdrive',force_remount=True)\n","%cd gdrive/My\\ Drive/Colab\\ Notebooks/BIIS_Project"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n","/content/gdrive/My Drive/Colab Notebooks/BIIS_Project\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Rp8o35cc4X2W","colab_type":"code","colab":{}},"source":["import re\n","import string\n","import ast"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V7_mzY4ZKshH","colab_type":"code","colab":{}},"source":["train_indices_directory= ''\n","dev_indices_directory=''\n","test_indices_directory=''"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TXjBbJeE4gq-","colab_type":"code","colab":{}},"source":["train_source_file_directory= 'Data/KVR/train_regex_kb_indices.txt'\n","train_target_file_directory= 'Data/KVR/train_final.txt'\n","dev_source_file_directory= 'Data/KVR/dev_regex_kb_indices.txt'\n","dev_target_file_directory= 'Data/KVR/dev_final.txt'\n","test_source_file_directory= 'Data/KVR/test_regex_kb_indices.txt'\n","test_target_file_directory= 'Data/KVR/test_final.txt'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zXKotEvtLG9H","colab_type":"code","colab":{}},"source":["def read_indices(indices_file):\n","  indices_lists= []\n","  with open(indices_file,'r') as reader:\n","    \n","    for line in reader:\n","      line= line.strip()\n","      if line:\n","        indices_list = ast.literal_eval(line)\n","        indices_lists.append(indices_list)\n","  return indices_lists"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qFzL_FyzLHP9","colab_type":"code","colab":{}},"source":["train_indices_lists= read_indices(train_indices_directory)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fI2Bn7MOk4R6","colab_type":"code","colab":{}},"source":["def remove_items_with_indexes(input_list, indexes_to_remove):\n","  for index in sorted(indexes_to_remove,reverse=True):\n","    del input_list[index]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QZiB1xep4_kB","colab_type":"code","colab":{}},"source":["def filter_kb_indices(source_file,target_file,indices_list):\n","  with open(source_file,'r') as reader, open (target_file,'w') as writer:\n","    target_text=\"\"\n","    source_text=reader.read()\n","\n","    split_dialogue_regex= re.compile('\\n\\n')\n","    split_line_regex= re.compile('\\n')\n","    match_dialogue_regex= re.compile('^[1-9]\\d*$')\n","    find_gold_regex = re.compile('\\[(.*?)\\]')\n","\n","    dialogues= split_dialogue_regex.split(source_text)\n","\n","    if(len(dialogues)!=len(indices_list)):\n","      print(\"Number of dialogues: {}\".format(len(dialogues)))\n","      print(\"Number of indices list: {}\".format(len(indices_list)))\n","      raise Exception(\"Number of dialogues and indices do not match.\")\n","\n","\n","\n","    for dialogue_index, dialogue in enumerate(dialogues):\n","      task_line_text=\"\"\n","      target_text_dialogue=\"\"\n","      kb_sentences_list=[]\n","      kb_sentences=\"\"\n","      dialogue_sentences =\"\"\n","\n","      indexes_to_remove= []  #for example input list= [0, 0, 1], remove index 2\n","      for binary_index, binary_value in enumerate(indices_list[dialogue_index]):\n","        if binary_value==1:\n","          indexes_to_remove.append(binary_index)\n","\n","      lines = split_line_regex.split(dialogue)\n","\n","      for line in lines:\n","        line=line.strip()\n","        if line:\n","\n","          if '#' in line:\n","            task_line_text += line + '\\n'\n","            continue\n","\n","          line_indicator, sentence = line.split(' ',1)\n","          if line_indicator == '0':\n","            kb_sentences_list.append(sentence)\n","\n","          if match_dialogue_regex.match(line_indicator):\n","            dialogue_sentences += line_indicator + ' ' + sentence + '\\n'\n","\n","      # There is an empty KB dialogue\n","      if len(kb_sentences_list) == 0:\n","          continue\n","      # KB for this dialogue is not empty\n","      else:\n","        remove_item_with_indexes(kb_sentences_list,indexes_to_remove)\n","        for kb_sentence in kb_sentences_list:\n","          kb_sentences+='0 '+ kb_sentence + '\\n'\n","        target_text_dialogue+= task_line_text+ kb_sentences + dialogue_sentences+'\\n'\n","        target_text+= target_text_dialogue\n","    writer.write(target_text)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UcEYgs0DlSuZ","colab_type":"code","colab":{}},"source":["filter_kb_indices(train_source_file_directory,train_target_file_directory,train_indices_lists)"],"execution_count":0,"outputs":[]}]}